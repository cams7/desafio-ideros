<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 	http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/tx    	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="br.com.cams7.ideros.entity" />

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
				<!-- prop key="hibernate.current_session_context_class">thread</prop -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
			</props>
		</property>
	</bean>

	<!-- There is also a transactionManager bean. This bean is the Spring Hibernate 
		transaction manager that will handle transaction related boilerplate code 
		and wiring for us. We needed to define the session factory that the transaction 
		manager will use to create sessions (attribute sessionFactory-ref). -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory">
	</bean>

	<!-- tx:annotation-driven element defines that we are declaring transactions 
		using annotations in our classes (remember @Transactional annotations in 
		our service layer?). -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>